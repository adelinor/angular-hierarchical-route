{"name":"angular-hierarchical-route","tagline":"Helps the definition and usage of routes in an AngularJS app","body":"This is an illustrated introduction to the `angular-hierarchical-route` module which purpose is to help you build and use routes in your AngularJS app.\r\nThe [README file](https://github.com/adelinor/angular-hierarchical-route/blob/master/README.md) provides a more succinct version of this content.\r\n\r\n![introduction with controller](content_img/intro_with_ctrl.png)\r\n\r\n### [1] Building routes\r\n![route un-assembled](content_img/route_to_assemble.png)\r\n\r\nBefore the app starts offering its services to the users, the route gets assembled ...\r\n\r\n![route construction](content_img/route_construction.png)\r\n\r\n... with the `$routeProvider` of `ngRoute` when configuring your application AngularJS module:\r\n\r\n{% highlight javascript %}\r\nangular.module('sample.routes', ['ngRoute'])\r\n.config(['$routeProvider', function($routeProvider) {\r\n\r\n    $routeProvider.when('/home', {templateUrl: 'home/home.html',\r\n                                  controller: 'HomeCtrl'});\r\n    // ...\r\n}]);\r\n{% endhighlight %}\r\n\r\n![route construction](content_img/route_built.png)\r\n\r\nWhen you want to associate **several routes to a view** (displayed with the `ng-view` directive), you can use this module to create a hierarchical route. A hierarchical route functions as an **underground line**:\r\n\r\n![underground line](content_img/underground_line.png)\r\n\r\nA **hierarchical route** as an underground line has places where you can join and stop: like an underground station. As same as a station belongs to an underground line, a route that belongs to a hierarchical route.\r\n\r\n![station called 'choose city'](content_img/station.png)\r\n\r\n### [2] Defining hierarchical routes\r\nTo define a hierarchical route, you need to inject the `hierarchyProvider` in the config method of your module:\r\n\r\n```js\r\nangular.module('sample.routes', ['ngRoute', 'angularHierarchicalRoute'])\r\n.config(['$routeProvider', 'hierarchyProvider',\r\n         function($routeProvider, hierarchyProvider) {\r\n\t\r\n    hierarchyProvider.add({\r\n        rootPath: '/home',\r\n        templateUrl: 'home/home.html',\r\n        controller: 'HomeCtrl'})\r\n    .callableFrom('/home','home')\r\n    .callableFrom('/home/:countryId','choose city')\r\n    // ... \r\n    .registerWith($routeProvider);\r\n```\r\n\r\nAll routes in the hierarchy share the same view and controller. The `rootPath` must be one of the routes in your hierarchy and is the default entry point to your view.\r\nFinally you register your hierarchical route with `$routeProvider` .\r\n\r\nWhen all your routes are created, your application can start receiving users.\r\n\r\n![users on your route](content_img/users_en_route.png)\r\n\r\n\r\n### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at https://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}